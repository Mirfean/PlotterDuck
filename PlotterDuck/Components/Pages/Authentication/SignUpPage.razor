@page "/signForm"
@using System.Text.RegularExpressions
@using Firebase.Auth
@using PlotterDuck.Components.Models.Firebase

<EditForm Model="@formData" OnValidSubmit="@Login">
@*     <AntiforgeryToken /> *@
    <label>Email:</label>
    <br />
    <InputText @bind-Value=formData.email />
    <ValidationMessage For="@(() => formData.email)" />
    <br />
    <label>Password:</label>
    <br />
    <InputText type="password" @bind-Value=formData.password />
    <ValidationMessage For="@(() => formData.password)" />
    <br />
    <button type="submit">Log in</button>
</EditForm>

@Info

@code{

    public class LogInData()
    {
        public string email { get; set; }
        public string password { get; set; }
    } 

    LogInData formData = new LogInData();

    AuthData _authData;

    FirebaseAuthService authService = new FirebaseAuthService();
    //AuthData _authForm = new AuthData(email: "test", password: "test");

    string Info = "";

    public void SetAuthData()
    {
        _authData = new AuthData()
        {
            email = formData.email,
			password = formData.password
		};

    }

    public async void Login()
    {
        if (IsValidEmail(formData.email) && IsValidPassword(formData.password))
        {
            await authService.SignUp(formData.email, formData.password);
            Info = "Login in progress...";
        }
        else
        {
            Info = "Invalid username or password. Please try again.";
        }
    }

    private bool IsValidUsername(string username)
    {
        // Use regex to check if username is minimum 6 letters long
        string pattern = @"^[a-zA-Z]{6,}$";
        return Regex.IsMatch(username, pattern);
    }

    private bool IsValidPassword(string password)
    {
        // Use regex to check if password is 8 characters long and contains at least one special symbol and one number
        string pattern = @"^(?=.*[!@#$%^&*(),.?\:{}|<>])(?=.*[0-9]).{8,}$";
        return Regex.IsMatch(password, pattern);
    }

    private bool IsValidEmail(string email){
        // Use regex to check if email is valid
		string pattern = @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$";
		return Regex.IsMatch(email, pattern);
    }


}